//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/InputActionData/InputActionDatas.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActionDatas: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActionDatas()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActionDatas"",
    ""maps"": [
        {
            ""name"": ""PlayerInteraction"",
            ""id"": ""706b5d5b-0a60-4d60-9af3-588ac3404d26"",
            ""actions"": [
                {
                    ""name"": ""Tap"",
                    ""type"": ""Button"",
                    ""id"": ""005bcded-a6c3-4d3c-ae1f-d3bc729b2bef"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PositionMouse"",
                    ""type"": ""Value"",
                    ""id"": ""56740489-b05a-497a-9725-1136d3561a4e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c402fec7-43b3-45ec-846b-bcfa2749f418"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerController"",
                    ""action"": ""PositionMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""68c0d61e-2f50-495a-835e-cd8100ab9f6d"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerController"",
                    ""action"": ""PositionMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""714cf80d-ef17-4513-a820-f947580c0aa2"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8b026bb3-cbbc-4718-a844-30c2f634b624"",
                    ""path"": ""<Touchscreen>/primaryTouch/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PlayerController"",
            ""bindingGroup"": ""PlayerController"",
            ""devices"": []
        }
    ]
}");
        // PlayerInteraction
        m_PlayerInteraction = asset.FindActionMap("PlayerInteraction", throwIfNotFound: true);
        m_PlayerInteraction_Tap = m_PlayerInteraction.FindAction("Tap", throwIfNotFound: true);
        m_PlayerInteraction_PositionMouse = m_PlayerInteraction.FindAction("PositionMouse", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerInteraction
    private readonly InputActionMap m_PlayerInteraction;
    private List<IPlayerInteractionActions> m_PlayerInteractionActionsCallbackInterfaces = new List<IPlayerInteractionActions>();
    private readonly InputAction m_PlayerInteraction_Tap;
    private readonly InputAction m_PlayerInteraction_PositionMouse;
    public struct PlayerInteractionActions
    {
        private @InputActionDatas m_Wrapper;
        public PlayerInteractionActions(@InputActionDatas wrapper) { m_Wrapper = wrapper; }
        public InputAction @Tap => m_Wrapper.m_PlayerInteraction_Tap;
        public InputAction @PositionMouse => m_Wrapper.m_PlayerInteraction_PositionMouse;
        public InputActionMap Get() { return m_Wrapper.m_PlayerInteraction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerInteractionActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerInteractionActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerInteractionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerInteractionActionsCallbackInterfaces.Add(instance);
            @Tap.started += instance.OnTap;
            @Tap.performed += instance.OnTap;
            @Tap.canceled += instance.OnTap;
            @PositionMouse.started += instance.OnPositionMouse;
            @PositionMouse.performed += instance.OnPositionMouse;
            @PositionMouse.canceled += instance.OnPositionMouse;
        }

        private void UnregisterCallbacks(IPlayerInteractionActions instance)
        {
            @Tap.started -= instance.OnTap;
            @Tap.performed -= instance.OnTap;
            @Tap.canceled -= instance.OnTap;
            @PositionMouse.started -= instance.OnPositionMouse;
            @PositionMouse.performed -= instance.OnPositionMouse;
            @PositionMouse.canceled -= instance.OnPositionMouse;
        }

        public void RemoveCallbacks(IPlayerInteractionActions instance)
        {
            if (m_Wrapper.m_PlayerInteractionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerInteractionActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerInteractionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerInteractionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerInteractionActions @PlayerInteraction => new PlayerInteractionActions(this);
    private int m_PlayerControllerSchemeIndex = -1;
    public InputControlScheme PlayerControllerScheme
    {
        get
        {
            if (m_PlayerControllerSchemeIndex == -1) m_PlayerControllerSchemeIndex = asset.FindControlSchemeIndex("PlayerController");
            return asset.controlSchemes[m_PlayerControllerSchemeIndex];
        }
    }
    public interface IPlayerInteractionActions
    {
        void OnTap(InputAction.CallbackContext context);
        void OnPositionMouse(InputAction.CallbackContext context);
    }
}
